{"version":3,"sources":["components/task.js","App.js","registerServiceWorker.js","index.js"],"names":["Task","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","_this$props","props","description","tasks","isCompleted","handleDelete","handleToggle","react_default","a","createElement","Fragment","style","textDecoration","type","defaultChecked","onChange","length","id","onClick","Component","App","newTask","localStorage","getItem","setState","JSON","parse","nextProps","nextState","setItem","stringify","index","slice","task","e","preventDefault","_this$state","newTasks","toConsumableArray","concat","target","value","selectedTask","filter","_this2","_this$state2","className","map","components_task","key","onSubmit","addTask","handleNewTask","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2f48f50f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Task extends Component {\r\n  constructor(){\r\n  super();\r\n    this.state = {\r\n      color: \"green\"\r\n    };\r\n}\r\n\r\n  render() {\r\n    const { description, tasks, isCompleted, handleDelete, handleToggle } = this.props;\r\n    const { color } = this.state;\r\n    return (\r\n            <React.Fragment>\r\n              <li style={isCompleted ? {textDecoration: \"line-through\"} : {textDecoration: \"none\"}}>\r\n              <input\r\n              type=\"checkbox\"\r\n              defaultChecked= { isCompleted }\r\n              onChange={ handleToggle }\r\n\r\n              />\r\n              <span style={tasks.length < 3 ? { color: \"red\" } : { color: color }}>\r\n              { description }\r\n              </span>\r\n              <button id=\"delete-button\" onClick={ handleDelete }> Delete </button>\r\n              </li>\r\n            </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport Task from './components/task.js';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      tasks: [\r\n              { description: \"Walk the dog\", isCompleted: true},\r\n              { description: \"Clean my room\", isCompleted: false },\r\n              { description: \"Study for my assessment\", isCompleted: false}\r\n            ],\r\n      newTask: \" \"\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    localStorage.getItem(\"tasks\") && this.setState({\r\n      tasks: JSON.parse(localStorage.getItem(\"tasks\"))\r\n    })\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(nextState.tasks));\r\n  }\r\n\r\n    handleToggle(index) {\r\n      const tasks = this.state.tasks.slice();\r\n      const task = tasks[index];\r\n      task.isCompleted = task.isCompleted ? false : true;\r\n      this.setState({ tasks : tasks });\r\n    }\r\n\r\n  addTask(e) {\r\n    e.preventDefault();\r\n    const { tasks, newTask } = this.state;\r\n    if (!this.state.newTask) { return }\r\n    const newTasks = { description: newTask, isCompleted: false };\r\n    this.setState({ tasks: [...tasks, newTasks], newTask: \" \" });\r\n  }\r\n\r\n  handleNewTask(e) {\r\n    this.setState({ newTask: e.target.value});\r\n  }\r\n\r\n  handleDelete(selectedTask) {\r\n    const { tasks } = this.state;\r\n    let newTasks = tasks.filter(task => task !== selectedTask );\r\n    this.setState({ tasks : newTasks });\r\n  }\r\n\r\n  render() {\r\n    const { tasks, newTask } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <h1 id=\"app-title\">Conquer your Tasks</h1>\r\n        <p className=\"app-instructions\"> Add atleast three things to complete when you wake up. </p>\r\n        <p className=\"app-instructions\"> Complete and check off those tasks by the end of the day. </p>\r\n        <ul>\r\n          { tasks.map((task, index) =>\r\n            <Task\r\n              key={ index }\r\n              description={ task.description }\r\n              isCompleted={ task.isCompleted }\r\n              handleToggle={() => this.handleToggle(index)}\r\n              tasks={ tasks }\r\n              handleDelete={() => this.handleDelete(task)}\r\n            /> )\r\n          }\r\n        </ul>\r\n        <form\r\n        className=\"new-task\"\r\n        onSubmit={(e) => this.addTask(e)}>\r\n          <input\r\n          type=\"text\"\r\n          value={ newTask }\r\n          onChange={(e) => this.handleNewTask(e)}\r\n          />\r\n          <input\r\n          id=\"add-button\"\r\n          type=\"submit\"\r\n          value=\"Add\"\r\n          />\r\n        </form>\r\n        <p>{tasks.length} tasks </p>\r\n        <p> { tasks.filter(task => task.isCompleted).length } task(s) completed </p>\r\n        <p> { tasks.filter(task => !task.isCompleted).length } task(s) not completed </p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}